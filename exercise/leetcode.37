//解数独


class Solution {
public:
    bool row[9][9] = {0};      //映射每行数字出现情况
    bool col[9][9] = {0};      //映射每列数字出现情况
    bool nums[3][3][9] = {0};  //映射每个3*3九宫格的数字出现情况

    bool dfs(vector<vector<char>>& board)
    {
        for(int i = 0; i < 9; ++i)
        {
            for(int j = 0; j < 9; ++j)
            {
                if(board[i][j] == '.')
                {
                    for(int k = 1; k <= 9; ++k)
                    {
                        if(!row[i][k - 1] && !col[j][k - 1] && !nums[i / 3][j / 3][k - 1])
                        {
                            board[i][j] = k + '0';
                            row[i][k - 1] = col[j][k - 1] = nums[i / 3][j / 3][k - 1] = true;
                            if(dfs(board)) return true;
                            board[i][j] = '.';
                            row[i][k - 1] = col[j][k - 1] = nums[i / 3][j / 3][k - 1] = false;
                        }
                    }
                    return false;
                }
            }
        }
        return true;

    }

    void solveSudoku(vector<vector<char>>& board) 
    {
        for(int i = 0; i < 9; ++i)
        {
            for(int j = 0; j < 9; ++j)
            {
                if(board[i][j] != '.')
                {
                    int index = board[i][j] - '0' - 1;
                    row[i][index] = true;
                    col[j][index] = true;
                    nums[i / 3][j / 3][index] = true;
                }
            }
        }
        dfs(board);
    }
};