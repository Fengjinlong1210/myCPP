全排列, 不出现重复的数组
class Solution {
public:
    vector<vector<int>> ret;
    vector<int> cur;
    bool judge[9] = {false};

    void dfs(vector<int>& nums, int start)
    {
        if(start == nums.size())
        {
            ret.push_back(cur);
            return;
        }

        for(int i = 0; i < nums.size(); ++i)
        {
            if(judge[i] == false && (i == 0 || nums[i] != nums[i - 1] || judge[i - 1] == true))
            //满足条件时, 当前位置没有出现过 并且 (当前位置是第一个 || 当前位置与前一个位置不等 || 前一个位置出现过)
            {
                cur.push_back(nums[i]);
                judge[i] = true;
                dfs(nums, start + 1);
                cur.pop_back();
                judge[i] = false;
            }
        }
    }

    vector<vector<int>> permuteUnique(vector<int>& nums) 
    {
        sort(nums.begin(), nums.end());
        dfs(nums, 0);
        return ret;
    }
};