//股票的最佳买卖时机

class Solution {
public:
    int maxProfit(vector<int>& prices) 
    {
        //遍历一次，得到最小的价格
        int minPrice = prices[0];
        int ret = -prices[0];   //表示当前的最大利润
        for(int i = 1; i < prices.size(); ++i)
        {
            ret = max(ret, prices[i] - minPrice);   //可以选择卖或不卖
            minPrice = min(minPrice, prices[i]);    //找到当前最小的股票价格
        }
        return ret < 0 ? 0 : ret;
    }
};

//股票的最佳买卖时机2

class Solution {
public:
    int maxProfit(vector<int>& prices) 
    {
        int n = prices.size();
        vector<vector<int>> dp(n, vector<int>(2));
        dp[0][0] = 0;
        dp[0][1] = -prices[0];
        for(int i = 1; i < n; ++i)
        {
            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i]);
            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i]);
        }
        return dp[n - 1][0];
    }
};