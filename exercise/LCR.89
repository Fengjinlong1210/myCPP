//打家劫舍


class Solution {
public:
    int rob(vector<int>& nums) 
    {
        int n = nums.size();
        if(n == 1) return nums[0];
        vector<int> dp(n);
        dp[0] = nums[0];
        dp[1] = max(nums[0], nums[1]);
        for(int i = 2; i < n; ++i)
        {
            dp[i] = max(dp[i - 2] + nums[i], dp[i - 1]);
        }
        return dp[n - 1];
    }
};


//打家劫舍2

class Solution {
public:

    int _rob(vector<int> nums) 
    {
        int n = nums.size();
        if(n == 1) return nums[0];
        vector<int> dp(n);
        dp[0] = nums[0];
        dp[1] = max(nums[0], nums[1]);
        for(int i = 2; i < n; ++i)
        {
            dp[i] = max(dp[i - 2] + nums[i], dp[i - 1]);
        }
        return dp[n - 1];
    }
    //利用打家劫舍1，如果选第一个就不选最后一个，如果选最后一个就不选第一个
    //如果两个都不选，就被包含在了上面两种情况中
    int rob(vector<int>& nums) 
    {
        int n = nums.size();
        if(n == 1) return nums[0];
        if(n == 2) return max(nums[0], nums[1]);
        vector<int> rob1(nums.begin() + 1, nums.end());
        vector<int> rob2(nums.begin(), nums.end() - 1);
        return max(_rob(rob1), _rob(rob2));
    }
};
