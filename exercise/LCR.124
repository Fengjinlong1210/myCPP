/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> preorder;
    vector<int> inorder;
    TreeNode* func(int preBegin, int preEnd, int inBegin, int inEnd)
    {
        if(preBegin == preEnd || inBegin == inEnd)
        {
            return nullptr;
        }
        int val = preorder[preBegin];
        auto root = new TreeNode(val);
        //找出root在中序遍历中的位置
        int pos = inBegin;
        for(; pos < inEnd; ++pos)
        {
            if(inorder[pos] == val)
                break;
        }
        int leftsize = pos - inBegin;
        root->left = func(preBegin + 1, preBegin + leftsize + 1, inBegin, pos);
        root->right = func(preBegin + leftsize + 1, preEnd, pos + 1, inEnd);
        return root;
    }

    TreeNode* deduceTree(vector<int>& _preorder, vector<int>& _inorder) 
    {
        preorder = _preorder;
        inorder = _inorder;
        return func(0, _preorder.size(), 0, _inorder.size());
    }
};