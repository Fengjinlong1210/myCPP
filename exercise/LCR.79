给定一个整数数组 nums ，数组中的元素 互不相同 。返回该数组所有可能的子集（幂集）。

解集 不能 包含重复的子集。你可以按 任意顺序 返回解集。

//解法一 每个数字可以有两种情况 选择 or 不选择
class Solution {
public:
    vector<int> path;
    vector<vector<int>> ret;

    void dfs(vector<int>& nums, int pos)
    {
        if(pos == nums.size())
        {
            ret.push_back(path);
            return;
        }

        //选当前元素 or 不选当前元素
        dfs(nums, pos + 1);
        path.push_back(nums[pos]);
        dfs(nums, pos + 1);
        path.pop_back();
    }

    vector<vector<int>> subsets(vector<int>& nums) 
    {
        dfs(nums, 0);
        return ret;
    }
};


//解法二  利用pos控制数组位置，pos前的已经排列好
class Solution {
public:
    vector<vector<int>> ret;
    vector<int> path;

    void dfs(vector<int>& nums, int pos)
    {
        //通过pos来指向当前函数要选择的位置
        ret.push_back(path);
        for(int i = pos; i < nums.size(); ++i)
        {
            path.push_back(nums[i]);
            dfs(nums, i + 1);
            path.pop_back();
        }
    }

    vector<vector<int>> subsets(vector<int>& nums) 
    {
        dfs(nums, 0);
        return ret;
    }
};