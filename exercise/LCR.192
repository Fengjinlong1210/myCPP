//把字符串转换成整数
class Solution {
public:
    int myAtoi(string str) 
    {
        //1. 去除前面的空格
        long long ret = 0;
        int cnt = 0;
        while(str[cnt] == ' ')
        {
            cnt++;
        }
        if(cnt)
        {
            str = str.substr(cnt);
        }
        //2. 判断第一位是否是符号, 是符号, 保存起来
        int negflag = 1;
        if(str[0] == '-' || str[0] == '+')
        {
            if(str[0] == '-')
                negflag = -1;
            str = str.substr(1);
        }

        //3. 如果不是符号也不是数字, 不能转换
        if(!isdigit(str[0]))
        {
            ret = 0;
            return ret;
        }

        //4. 截取连续的数字, 后面的其他字符不要
        for(int i = 0; i < str.size(); ++i)
        {
            if(!isdigit(str[i]))
            {
                break;
            }
            //这一步很关键，如果ret已经大于INT_MAX / 10了, 那么接下来乘十一定会越界
            //如果ret目前没有大于INT_MAX / 10, 但是ret == INT_MAX/10, 并且当前的数字大于7
            //那么也会越界, 因为INT_MAX等于2 * 31 - 1, 尾数是7
            //INT_MIN等于-2*32, 尾数是8, 无论该数字是正还是负都需要返回INT极限
            if(ret > (INT_MAX / 10) || (ret == INT_MAX / 10 && str[i] > '7'))
            {
                return negflag == 1 ? INT_MAX : INT_MIN;
            }
            ret = ret * 10 + str[i] - '0';
        }
        //5. 如果越界, 输出int极限
        return ret * negflag;
    }
};