105. 从前序与中序遍历序列构造二叉树
给定两个整数数组 preorder 和 inorder ，其中 preorder 是二叉树的先序遍历， inorder 是同一棵树的中序遍历，请构造二叉树并返回其根节点。

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 //前序遍历可以确定跟节点
 //通过中序遍历可以区分跟节点的左右子树
 //
class Solution {
public:
    TreeNode* build(vector<int>& preorder, vector<int>& inorder, int& prei, int inbegin, int inend)
    {
        if(inbegin > inend)
        {
            return nullptr;
        }
        TreeNode* root = new TreeNode(preorder[prei]);
        int rooti = inbegin;
        //从中序中找到root位置
        while(rooti <= inend)
        {
            if(preorder[prei] == inorder[rooti])
            {
                break;
            }
            ++rooti;
        }
        prei++;
        root->left = build(preorder, inorder, prei, inbegin, rooti - 1);
        root->right = build(preorder, inorder, prei, rooti + 1, inend);
        return root;
    }

    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) 
    {
        int prei = 0;
        TreeNode* root = build(preorder, inorder, prei, 0, inorder.size() - 1);
        return root;
    }
};




